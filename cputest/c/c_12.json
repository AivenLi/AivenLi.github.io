{"code":0,"msg":"success","data":[{"title":"变量 a 中的数据用二进制表示的形式是 01011101, 变量 b 中的数据用二进制表示的形式是 11110000。若要求将 a的高 4 位取反 ,低 4 位不变,所要执行的运算是（ ）。","chooseList":[{"title":"a^b","index":0,"selected":false},{"title":"a|b","index":1,"selected":false},{"title":"a\u0026b","index":2,"selected":false},{"title":"a\u003c\u003c4","index":3,"selected":false}],"mode":0,"answer":0,"parse":"本题考查的是位运算的知识 ,对于任何二进制数 ,和 1 进行异或运算会让其取反 ,而和 0 进行异或运算不会产生任何变化。"},{"title":"下面的程序段运行后 ,输出结果是\nint i, j, x \u003d 0;\nstatic int a[8][8];\nfor ( i \u003d 0; i \u003c 3; i++ )\nfor ( j \u003d 0; j \u003c 3; j++ )\na[i][j] \u003d 2*i+j;\nfor ( i \u003d 0; i \u003c 8; i++ )\nx +\u003d a[i][j];\nprintf(\"%d\", x);","chooseList":[{"title":"9","index":0,"selected":false},{"title":"不确定值","index":1,"selected":false},{"title":"0","index":2,"selected":false},{"title":"18","index":3,"selected":false}],"mode":0,"answer":2,"parse":"本题主要考查的是用二维数组首地址和下标来引用二维数组元素的方法。通过分析可知 ,程序中的双重循环定义了一个如下的二维数组\n0 1 2\n2 3 4\n4 5 6\n由于数组的下标是从 0开始的 ,所以二维数组元素 a[i][j] 表示的是二维数组 a的第i+1 行、第 j+1 列对应位置的元素。"},{"title":"有以下程序\n#include \u003cstdio.h\u003e\nint f(int x) {\nint y;\nif ( x \u003d\u003d 0 || x\u003d\u003d 1 ) return (3);\ny \u003d x * x - f(x-2);\nreturn y;\n}\nint main() {\nint z;\nz \u003d f(3);\nprintf(\"%d\\n\", z);\nreturn 0;\n}\n程序的运行结果是（ ）。","chooseList":[{"title":"0","index":0,"selected":false},{"title":"9","index":1,"selected":false},{"title":"6","index":2,"selected":false},{"title":"8","index":3,"selected":false}],"mode":0,"answer":2,"parse":"函数 int f(int x) 是一个递归函数调用 ,当 x 的值等于 0 或 1 时,函 数 值 等 于 3,其 他 情 况 下 y\u003dx2-f(x-2), 所 以 在 主 函 数 中 执行 语 句 z\u003df(3)时,y\u003d3*3-f(3-2)\u003d9-f(1)\u003d9-3\u003d6 。"},{"title":"当变量 c 的值不为 2、4、6 时,值也为“真”的表达式是（ ）。","chooseList":[{"title":"(c\u003d\u003d2)||(c\u003d\u003d4)||(c\u003d\u003d6)","index":0,"selected":false},{"title":"(c\u003e\u003d2\u0026\u0026 c\u003c\u003d6)||(c!\u003d3)||(c!\u003d5)","index":1,"selected":false},{"title":"(c\u003e\u003d2\u0026\u0026c\u003c\u003d6)\u0026\u0026!(c%2)","index":2,"selected":false},{"title":"(c\u003e\u003d2\u0026\u0026 c\u003c\u003d6)\u0026\u0026(c%2!\u003d1)","index":3,"selected":false}],"mode":0,"answer":1,"parse":" 满足表达式 (c\u003e\u003d2\u0026\u0026c\u003c\u003d6) 的整型变量 c 的值是 2,3,4,5,6。当变量c的值不为 2,4,6 时,其值只能为 3 或 5,所以表达式 c!\u003d3 和 c!\u003d5 中至少有一个为真 ,即不论 c 为何值 ,选项 B 中的表达式都为“真”。"},{"title":"有定义语句 :char s[10];,若要从终端给 s输入 5 个字符 ,错误的输入语句是（ ）。","chooseList":[{"title":"gets(\u0026s[0]);","index":0,"selected":false},{"title":"scanf(\"%s\",s+1);","index":1,"selected":false},{"title":"gets(s);","index":2,"selected":false},{"title":"scanf(\"%s\",s[1]);","index":3,"selected":false}],"mode":0,"answer":3,"parse":"在格式输入中 ,要求给出的是变量的地址 ,而 D)答案中给出的s[1]是一个值的表达式。"},{"title":"有以下程序段\nchar ch; int k;\nch \u003d \u0027a\u0027;\nk \u003d 12;\nprintf(\"%c,%d,\", ch, ch, k);\nprintf(\"k\u003d%d\\n\", k);\n已知字符 a的 ASCII 码值为 97,则执行上述程序段后输出结果是（ ）。","chooseList":[{"title":"因变量类型与格式描述符的类型不匹配输出无定值","index":0,"selected":false},{"title":"输出项与格式描述符个数不符 ,输出为零值或不定值","index":1,"selected":false},{"title":"a,97,12k\u003d12","index":2,"selected":false},{"title":"a,97,k\u003d12","index":3,"selected":false}],"mode":0,"answer":3,"parse":"输出格式控制符 %c 表示将变量以字符的形式输出 ;输出格式控制符 %d 表示将变量以带符号的十进制整型数输出 ,所以第一个输出语句输出第 15 页 共 208 页的结果为 a,97;第二个输出语句输出的结果为 k\u003d12。"},{"title":"下列有关数据库的描述 ,正确的是（ ）。","chooseList":[{"title":"数据处理是将信息转化为数据的过程","index":0,"selected":false},{"title":"数据的物理独立性是指当数据的逻辑结构改变时 ,数据的存储结构不变","index":1,"selected":false},{"title":"关系中的每一行称为元组 ,每一个列称为属性","index":2,"selected":false},{"title":"如果一个关系中的属性或属性组并非该关系的关键字 ,但它是另一个关系的关键字 ,则称其为本关系的外关键字","index":3,"selected":false}],"mode":0,"answer":3,"parse":"数据处理是指将数据转换成信息的过程 ,故选项 A)叙述错误 ;数据的物理独立性是指数据的物理结构的改变 ,不会影响数据库的逻辑结构 ,故选项 B)叙述错误 ;关系中的行称为元组 ,对应存储文件中的记录 ,关系中的列称为属性,对应存储文件中的字段 ,故选项 C)叙述错误。"},{"title":"如果进栈序列为 e1,e2,e3,e4, 则可能的出栈序列是（ ）。","chooseList":[{"title":"e3,e1,e4,e2 ","index":0,"selected":false},{"title":"e2,e4,e3,e1","index":1,"selected":false},{"title":"e3,e4,e1,e2 ","index":2,"selected":false},{"title":"任意顺序","index":3,"selected":false}],"mode":0,"answer":1,"parse":"如题进栈序列为e1,e2,e3,e4；先e1,e2,后出栈e2,再进栈e3,e4,然后全部出栈!得:e2,e4,e3,e1"},{"title":"以下选项中可作为 C 语言合法常量的是（ ）。","chooseList":[{"title":"-80","index":0,"selected":false},{"title":"-080","index":1,"selected":false},{"title":"-8e1.0","index":2,"selected":false},{"title":"-80.0e","index":3,"selected":false}],"mode":0,"answer":0,"parse":"选项 B)项中,以 0 开头表示是一个八进制数 ,而八进制数的取值范围是 0~7,所以-080 是不合法的 ;选项 C)和 D)中,e 后面的指数必须是整数 ,所以也不合法。"},{"title":"下列可用于 C 语言用户标识符的一组是（ ）。","chooseList":[{"title":"void, define, WORD","index":0,"selected":false},{"title":"a3_3,_123,Car","index":1,"selected":false},{"title":"For, -abc, IF Case","index":2,"selected":false},{"title":"2a, DO, sizeof","index":3,"selected":false}],"mode":0,"answer":1,"parse":" C 语言规定标识符只能由字母、 数字和下划线 3 种字符组成 ,且第一个字符必须为字母或下划线 ,排除选项 C)和 D);C 语言中还规定标识符不能为 C 语言的关键字 ,而选项 A)中 void 为关键字 ,故排除选项 A)。"},{"title":"以下叙述中错误的是（ ）。","chooseList":[{"title":"在程序中凡是以“#”开始的语句行都是预处理命令行","index":0,"selected":false},{"title":"预处理命令行的最后不能以分号表示结束","index":1,"selected":false},{"title":"#define MAX 是合法的宏定义命令行","index":2,"selected":false},{"title":"C 程序对预处理命令行的处理是在程序执行的过程中进行的","index":3,"selected":false}],"mode":0,"answer":3,"parse":"C语言中的预处理命令以符号#开头，这些命令是在程序编译之前进行处理的，选项D的描述错误。"},{"title":"下面程序段的运行结果是\nchar str[] \u003d \"ABC\", *p \u003d str;\nprintf(\"%d\\n\", *(p+3));","chooseList":[{"title":"67","index":0,"selected":false},{"title":"0","index":1,"selected":false},{"title":"字符\u0027C\u0027的地址","index":2,"selected":false},{"title":"\u0027C\u0027","index":3,"selected":false}],"mode":0,"answer":1,"parse":"查指向字符串的指针变量。 在该题中 ,指针变量 p 指向的应该是该字符串中的首地址 ,p+3 指向的是字符串结束标志 \u0027\\0\u0027的地址 ,因而 *(p+3)的值为 0。"},{"title":"若有以下定义\nstruct link {\nint data;\nstruct link *next;\n} a, b, c, *p, *q;\n且变量a和b之间已有关系如下a.next \u003d b; b.next \u003d NULL;\n指针p指向a，q指向c。则能够把c插入到a和b之间并形成新的链表的语句组是（ ）。","chooseList":[{"title":"a.next \u003d c; c.next \u003d b;","index":0,"selected":false},{"title":"p.next \u003d q; q.next \u003d p.next;","index":1,"selected":false},{"title":"p-\u003enext \u003d \u0026c; q-\u003enext \u003d p-\u003enext;","index":2,"selected":false},{"title":"(*p).next \u003d q; (*q).next \u003d \u0026b;","index":3,"selected":false}],"mode":0,"answer":3,"parse":"本题考查链表的数据结构 ,必须利用指针变量才能实现 ,即一个结点中应包含一个指针变量 ,用它存放下一结点的地址。"},{"title":"结构化程序设计主要强调的是（ ）。","chooseList":[{"title":"程序的规模","index":0,"selected":false},{"title":"程序的效率","index":1,"selected":false},{"title":"程序设计语言的先进性","index":2,"selected":false},{"title":"程序易读性","index":3,"selected":false}],"mode":0,"answer":3,"parse":"结构化程序设计方法的主要原则可以概括为自顶向下、逐步求精、模块化及限制使用 goto 语句,总的来说可使程序结构良好、 易读、易理解、易维护。"},{"title":"下列程序执行后的输出结果是\n#include \u003cstdio.h\u003e\nvoid func(int *a, int b[]) {\nb[0] \u003d *a + 6;\n}\nint main() {\nint a, b[5];\na \u003d 0; b[0] \u003d 3;\nfunc(\u0026a, b);\nprintf(\"%d\\n\", b[0]);\nreturn 0;\n}","chooseList":[{"title":"6","index":0,"selected":false},{"title":"7","index":1,"selected":false},{"title":"8","index":2,"selected":false},{"title":"9","index":3,"selected":false}],"mode":0,"answer":0,"parse":"数的参数不仅可以是整型、实型、字符型等数据 ,还可以是指针型。它的作用是将一个变量的地址传递到另一个函数中。 当数组名作参数时 ,如果形参数组中的各元素的值发生变化 ,实参数组元素的值也将随之发生变化。"},{"title":"有以下程序\n#include \u003cstdio.h\u003e\nvoid ss(char *s, char t) {\nwhile ( *s ) {\nif ( *s \u003d\u003d t ) *s \u003d t - \u0027a\u0027 + \u0027A\u0027;\ns++;\n}\n}\nint main() {\nchar str1[100] \u003d \"abcddfefdbd\",c \u003d \u0027d\u0027;\nss(str1, c);\nprintf(\"%s\\n\", str1);\nreturn 0;\n}\n程序运行后的输出结果是（ ）。","chooseList":[{"title":"ABCDDEFEDBD","index":0,"selected":false},{"title":"abcDDfefDbD","index":1,"selected":false},{"title":"abcAAfefAbA","index":2,"selected":false},{"title":"Abcddfefdbd","index":3,"selected":false}],"mode":0,"answer":1,"parse":"在内存中 ,字符数据以 ASCII 码存储 ,它的存储形式与整数的存储形式类似。 C 语言中 ,字符型数据和整型数据之间可以通用 ,也可以对字符型数据进行算术运算 ,此时相当于对它们的 ASCII 码进行算术运算 ,在本题中 ,s++相当于 s\u003ds+1,即让 s 指向数组中的下一个元素。"},{"title":"有以下程序\n#include \u003cstdio.h\u003e\nint main() {\n int i,s\u003d1;\nfor (i\u003d1;i\u003c50;i++)\nif(!(i%5)\u0026\u0026!(i%3)) s+\u003di;\nprintf(\"%d\\n\",s);}\n程序的输出结果是（ ）。","chooseList":[{"title":"409","index":0,"selected":false},{"title":"277","index":1,"selected":false},{"title":"1","index":2,"selected":false},{"title":"91","index":3,"selected":false}],"mode":0,"answer":3,"parse":"本题是计算 50之内的自然数相加之和 ,题中 if 语句括号中的条件表达式 !(i%5)\u0026\u0026!(i%3) 表明只有能同时被 5 和 3 整除的数才符合相加的条件,1~ 49 之间满足这个条件的只有 ,15、30 和 45,因为 s 的初始值为 1,所以s\u003d1+15+30+45\u003d91。"},{"title":"需求分析阶段的任务是确定（ ）。","chooseList":[{"title":"软件开发方法","index":0,"selected":false},{"title":"软件开发工具","index":1,"selected":false},{"title":"软件开发费用","index":2,"selected":false},{"title":"软件系统","index":3,"selected":false}],"mode":0,"answer":3,"parse":"需求分析是软件定义时期的最后一个阶段，它的基本任务就是详细调查现实世界要处理的对象（组织、部门、企业等），充分了解原系统的工作概况，明确用户的各种需求，然后在此基础上确定新系统的功能。选项 A)软件开发方法是在总体设计阶段需完成的任务 ;选项 B)软件开发工具是在实现阶段需完成的任务;选项 C)软件开发费用是在可行性研究阶段需完成的任务。"},{"title":"以下定义语句中正确的是（ ）。","chooseList":[{"title":"int a\u003db\u003d0;","index":0,"selected":false},{"title":"char A\u003d65+1,b\u003d′b′;","index":1,"selected":false},{"title":"float a\u003d1,*b\u003d\u0026a,* c\u003d\u0026b;","index":2,"selected":false},{"title":"double a \u003d 0;b\u003d1.1;","index":3,"selected":false}],"mode":0,"answer":1,"parse":"本题考查变量的定义方法。 如果要一次进行多个变量的定义 ,则在它们之间要用逗号隔开 ,因此选项 A)和 D)错误。在选项 C)中,变量 c 是一个浮点型指针 ,它只能指向一个浮点型数据 ,不能指向指针变量 b,故选项 C)错误。"},{"title":"对长度为 n 的线性表排序 ,在最坏情况下 ,比较次数不是 n(n-1)/2 的排序方法是（ ）。","chooseList":[{"title":"快速排序","index":0,"selected":false},{"title":"冒泡排序","index":1,"selected":false},{"title":"直接插入排序","index":2,"selected":false},{"title":"堆排序","index":3,"selected":false}],"mode":0,"answer":3,"parse":"在最坏情况下 ,快速排序、冒泡排序和直接插入排序需要的比较次数都为 n(n-1)/2,堆排序需要的比较次数为 nlog2n。"},{"title":"有如下程序\n#include \u003cstdio.h\u003e\nint main() {\nchar ch[2][5] \u003d {\"6937\", \"8254\" }, *p[2];\nint i, j, s \u003d 0;\nfor ( i \u003d 0; i \u003c 2; i++ ) p[i] \u003d ch[i];\nfor ( i \u003d 0; i \u003c 2; i++ )\nfor ( j \u003d 0; p[i][j] \u003e \u0027\\0\u0027; j +\u003d 2 )\ns \u003d 10 * s + p[i][j] - \u0027\\0\u0027;\nprintf(\"%d\\n\", s);\nreturn 0;\n}\n该程序的输出结果是 （ ）。","chooseList":[{"title":"69825","index":0,"selected":false},{"title":"63825","index":1,"selected":false},{"title":"6385","index":2,"selected":false},{"title":"693825","index":3,"selected":false}],"mode":0,"answer":2,"parse":""},{"title":"有三个关系 R、S 和 T 如下\nR: { B(a,b), C(0,1),D(k1,n1) }\nS：{ B(f, a, n), C(3, 0, 2), D(h2, k1, x1)}\nT: { B(a), C(0), D(k1) }\n由关系 R 和 S 通过运算得到关系 T,则所使用的运算为（ ）。","chooseList":[{"title":"并","index":0,"selected":false},{"title":"自然连接","index":1,"selected":false},{"title":"笛卡尔积","index":2,"selected":false},{"title":"交","index":3,"selected":false}],"mode":0,"answer":3,"parse":"在关系运算中 ,交的定义如下 :设 R1 和 R2 为参加运算的两个关系,它们具有相同的度 n,且相对应的属性值取自同一个域 ,则 R1 R2 为交运算 ,结果仍为度等于 n 的关系 ,其中,交运算的结果既属于 R1,又属于 R2。"},{"title":"以下能正确定义一维数组的选项是（ ）。","chooseList":[{"title":"int a[5]\u003d{0,1,2,3,4,5};","index":0,"selected":false},{"title":"char a[] \u003d { \u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027 };","index":1,"selected":false},{"title":"char a \u003d { \u0027A\u0027, \u0027B\u0027, \u0027C\u0027 };","index":2,"selected":false},{"title":"int a[5] \u003d \"0123\";","index":3,"selected":false}],"mode":0,"answer":1,"parse":"选项A中，定义的初值个数大于数组的长度；选项C中，数组名后少了中括号；选项D中，整型数组不能赋予字符串。"},{"title":"已知\nint t \u003d 0;\nwhile ( t \u003d 1 ) {...}\n则以下叙述正确的是（ ）。","chooseList":[{"title":"循环控制表达式的值为 0","index":0,"selected":false},{"title":"循环控制表达式的值为 1","index":1,"selected":false},{"title":"循环控制表达式不合法","index":2,"selected":false},{"title":"以上说法都不对","index":3,"selected":false}],"mode":0,"answer":1,"parse":" t\u003d1 是将 t 赋值为 1,所以循环控制表达式的值为 1。判断 t 是否等于 1 时,应用 t\u003d\u003d1,注意“\u003d”与“\u003d\u003d”的用法。"},{"title":"以下错误的定义语句是（ ）。","chooseList":[{"title":"int x[][3]\u003d{{0},{1},{1,2,3}};","index":0,"selected":false},{"title":"int x[4][3]\u003d{{1,2,3},{1,2,3},{1,2,3},{1,2,3}};","index":1,"selected":false},{"title":"int x[4][]\u003d{{1,2,3},{1,2,3},{1,2,3},{1,2,3}};","index":2,"selected":false},{"title":"int x[][3]\u003d{1,2,3,4};","index":3,"selected":false}],"mode":0,"answer":2,"parse":"本题考查的是二维数组的定义和初始化方法。 C 语言中 ,在定义并初始化二维数组时 ,可以省略数组第一维的长度 ,但是不能省略第二维的长度。故选项C错误。"},{"title":"若有语句: char *line[5];，以下叙述中正确的是（ ）。","chooseList":[{"title":"定义 line 是一个数组，每个数组元素是一个基类型为 char为指针变量","index":0,"selected":false},{"title":"定义 line 是一个指针变量，该变量可以指向一个长度为 5 的字符型数组","index":1,"selected":false},{"title":"定义 line 是一个指针数组，语句中的 *号称为间址运算符","index":2,"selected":false},{"title":"定义 line 是一个指向字符型函数的指针","index":3,"selected":false}],"mode":0,"answer":0,"parse":"C语言中“[]”比“*”优先级高，因此line先与[5]结合，形成line[5]形式，这是数组形式，它有5个元素，然后再与line前面的“*”结合，表示此数组是一个指针数组，每个数组元素都是一个基类型为char的指针变量。"},{"title":"以下叙述中错误的是（ ）。","chooseList":[{"title":"gets 函数用于从终端读入字符串","index":0,"selected":false},{"title":"getchar函数用于从磁盘文件读入字符","index":1,"selected":false},{"title":"fputs 函数用于把字符串输出到文件","index":2,"selected":false},{"title":"fwrite 函数用于以二进制形式输出数据到文件","index":3,"selected":false}],"mode":0,"answer":1,"parse":"getchar函数的作用是从终端读入一个字符。"},{"title":"有以下程序\n#include \u003cstdio.h\u003e\nint main() {\nint x\u003d1,y\u003d0,a\u003d0,b\u003d0;\nswitch(x) {\ncase 1: switch(y) {\ncase 0: a++; break;\ncase 1:b++; break;\n}\ncase 2:a++; b++; break;\ncase 3:a++; b++;\n}\nprintf(\"a\u003d%d,b\u003d%d\\n\",a,b);\nreturn 0;\n}\n程序的运行结果是（ ）。","chooseList":[{"title":"a\u003d1,b\u003d0","index":0,"selected":false},{"title":"a\u003d2,b\u003d2","index":1,"selected":false},{"title":"a\u003d1,b\u003d1","index":2,"selected":false},{"title":"a\u003d2,b\u003d1","index":3,"selected":false}],"mode":0,"answer":3,"parse":"本题考查 switch 语句,首先 ,x\u003d1 符合条件 case 1, 执行 switch(y)语句,y\u003d0 符合 case 0 语句,执行 a++并跳出 switch(y)语句,此时 a\u003d1。因为 case 1语句后面没有 break 语句,所以向后执行 case 2 语句 ,执行 a++,b++,然后跳出switch(x),得 a\u003d2,b\u003d1。"},{"title":"以下叙述中正确的是（ ）。","chooseList":[{"title":"用 C 程序实现的算法必须要有输入和输出操作","index":0,"selected":false},{"title":"用 C 程序实现的算法可以没有输出但必须要有输入","index":1,"selected":false},{"title":"用 C 程序实现的算法可以没有输入但必须要有输出","index":2,"selected":false},{"title":"用 C 程序实现的算法可以既没有输入也没有输出","index":3,"selected":false}],"mode":0,"answer":2,"parse":"算法具有的 5 个特性是 :有穷性 ;确定性 ;可行性 ;有 0 个或多个输入;有一个或多个输出。所以说 ,用 C 程序实现的算法可以没有输入但必须要有输出。"},{"title":"下面程序的输出结果是\n#include \u003cstdio.h\u003e\nint main() {\nint a[10] \u003d { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }, *p \u003d a;\nprintf(\"%d\\n\", *(p+2));\nreturn 0;\n}","chooseList":[{"title":"3","index":0,"selected":false},{"title":"4","index":1,"selected":false},{"title":"1","index":2,"selected":false},{"title":"2","index":3,"selected":false}],"mode":0,"answer":0,"parse":"在 C 语言中 ,数组元素是从 0 开始的。指针变量 p 指向数组的首地址 ,(p+2)就会指向数组中的第 3 个元素。题目中要求输出的是元素的值。"},{"title":"若变量已正确定义 ,有以下程序段\nint a \u003d 3, b \u003d 5, c \u003d 7;\nif ( a \u003e b ) a \u003d b; c \u003d a;\nif ( c !\u003d a ) c \u003d b;\nprintf(\"%d,%d,%d\\n\", a, b, c);\n其输出结果是（ ）。","chooseList":[{"title":"程序段有语法错","index":0,"selected":false},{"title":"3,5,3","index":1,"selected":false},{"title":"3,5,5","index":2,"selected":false},{"title":"3,5,7","index":3,"selected":false}],"mode":0,"answer":1,"parse":"两个 if 语句的判断条件都不满足 ,程序只执行了 c\u003da 这条语句,所以变量 c的值等于 3,变量 b 的值没能变化 ,程序输出的结果为 3,5,3。所以正确答案为B。"},{"title":"下列程序的输出结果是\n#include \"stdio.h\"\nint main() {\nint i, a \u003d 0, b \u003d 0;\nfor ( i \u003d 1; i \u003c 10; i++ ) {\nif ( i % 2 \u003d\u003d 0 ) {\na++;continue;\n}\nb++;\n}\nprintf(\"a\u003d%d,b\u003d%d\", a, b);\nreturn 0;\n}","chooseList":[{"title":"a\u003d4,b\u003d4","index":0,"selected":false},{"title":"a\u003d4,b\u003d5","index":1,"selected":false},{"title":"a\u003d5,b\u003d4","index":2,"selected":false},{"title":"a\u003d5,b\u003d5","index":3,"selected":false}],"mode":0,"answer":1,"parse":"continue 语句的作用是跳过本次循环体中余下尚未执行的语句 ,接着再一次进行循环条件的判定。当能被 2 整除时 ,a就会增 1,之后执行 continue语句,直接执行到 for 循环体的结尾 ,进行 i++,判断循环条件。"},{"title":"为了避免流程图在描述程序逻辑时的灵活性 ,提出了用方框图来代替传统的程序流程图 ,通常也把这种图称为（ ）。","chooseList":[{"title":"PAD图","index":0,"selected":false},{"title":"N-S图","index":1,"selected":false},{"title":"结构图","index":2,"selected":false},{"title":"数据流图","index":3,"selected":false}],"mode":0,"answer":1,"parse":" N-S 图是由 Nassi 和 Shneiderman 提出的一种符合程序化结构设计原则的图形描述工具。 它的提出是为了避免流程图在描述程序逻辑时的随意性上灵活性。"},{"title":"为了使模块尽可能独立 ,要求（ ）。","chooseList":[{"title":"模块的内聚程度要尽量高，且各模块间的耦合程度要尽量强","index":0,"selected":false},{"title":"模块的内聚程度要尽量高，且各模块间的耦合程度要尽量弱","index":1,"selected":false},{"title":"模块的内聚程度要尽量低，且各模块间的耦合程度要尽量弱","index":2,"selected":false},{"title":"模块的内聚程度要尽量低，且各模块间的耦合程度要尽量强","index":3,"selected":false}],"mode":0,"answer":1,"parse":"模块的独立程度可以由两个定性标准度量：耦合性和内聚性。耦合性是衡量不同模块彼此间互相依赖 (连接)的紧密程度；内聚性是衡量一个模块内部各个元素彼此结合的紧密程度。一般来说，要求模块之间的耦合尽可能地低，而内聚性尽可能地高。"},{"title":"对于下述程序 ,在方式串分别采用 \"wt\" 和\"wb\" 运行时 ,两次生成的文件 TEST的长度分别是\n#include \u003cstdio.h\u003e\nint main() {\nFILE *fp \u003d fopen(\"TEST\", );\nfputc(\u0027A\u0027, fp); fputc(\u0027\\n\u0027, fp);\nfputc(\u0027B\u0027, fp); fputc(\u0027\\n\u0027, fp);\nfputc(\u0027C\u0027, fp);\nfclose(fp);\nreturn 0;\n}","chooseList":[{"title":"7字节、7字节","index":0,"selected":false},{"title":"7字节、5字节","index":1,"selected":false},{"title":"5字节、7字节","index":2,"selected":false},{"title":"5字节、5字节","index":3,"selected":false}],"mode":0,"answer":1,"parse":" 以\"wt\"方式写入的是字符文件 ,转义字符 \u0027\\n\u0027被看作两个字符来处理。而 \"wb\"方式写入的是二进制文件 ,转义字符 \u0027\\n\u0027是一个字符。"},{"title":"有以下程序\n#include \u003cstdio.h\u003e\n#include \u003cstring.h\u003e\nvoid fun(char *s[], int n) {\nchar *t; int i, j;\nfor ( i \u003d 0; i \u003c n-1; i++ )\nfor ( j \u003d i+1; j \u003c n; j++ ) {\nif ( strlen(s[i] \u003e strlen(s[j])) {\nt \u003d s[i]; s[i] \u003d s[j]; s[j] \u003d t;\n}\nint main() {\nchar *ss[] \u003d {\"bcc\", \"bbcc\", \"xy\", \"aaaacc\", \"aabcc\" };\nfun(ss, 5);\nprintf(\"%s,%s\\n\", ss[0], ss[4]);\nreturn 0;\n}\n程序的运行结果是（ ）。","chooseList":[{"title":"xy,aaaacc","index":0,"selected":false},{"title":"aaaacc,xy","index":1,"selected":false},{"title":"bcc,aabcc","index":2,"selected":false},{"title":"aabcc,bcc","index":3,"selected":false}],"mode":0,"answer":0,"parse":"函数 fun(char *s[],int n) 的功能是对字符串数组的元素按照字符串的长度从小到大排序。在主函数中执行 fun(ss,5)语句后 ,*ss[]\u003d{\"xy\", \"bcc\",\"bbcc\", \"aabcc\", \"aaaacc\"},ss[0],ss[4]的输出结果为 xy,aaaacc。"},{"title":"算法的有穷性是指（ ）。","chooseList":[{"title":"算法程序的运行时间是有限的","index":0,"selected":false},{"title":"算法程序所处理的数据量是有限的","index":1,"selected":false},{"title":"算法程序的长度是有限的","index":2,"selected":false},{"title":"算法只能被有限的用户使用","index":3,"selected":false}],"mode":0,"answer":0,"parse":"算法具有5个特性：1.有穷性：一个算法必须 (对任何合法的输入值)在执行有穷步之后结束 ,且每一步都可在有限时间内完成 ,即运行时间是有限的;2.确定性：算法中每一条指令必须有确切的含义，读者理解时不会产生歧义；3.可行性：一个算法是可行的，即算法中描述的操作都是可以通过已经实现的基本运算执行有限次来实现；4.输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合；5.输出：一个算法有一个或多个输出。"},{"title":"将 E-R 图转换到关系模式时 ,实体与联系都可以表示成（ ）。","chooseList":[{"title":"属性","index":0,"selected":false},{"title":"关系","index":1,"selected":false},{"title":"键","index":2,"selected":false},{"title":"域","index":3,"selected":false}],"mode":0,"answer":1,"parse":"系数据库逻辑设计的主要工作是将 - 图转换成指定RDBMS 中的关系模式。首先 ,从 E-R 图到关系模式的转换是比较直接的 ,实体与联系都可以表示成关系 ,E-R 图中属性也可以转换成关系的属性 ,实体集也可以转换成关系。"},{"title":"设有以下说明语句\ntypedef struct {\nint n;\nchar ch[8];\n} PER;\n则下面叙述中正确的是（ ）。","chooseList":[{"title":"PER 是结构体变量名","index":0,"selected":false},{"title":"PER 是结构体类型名","index":1,"selected":false},{"title":"typedef struct 是结构体类型","index":2,"selected":false},{"title":"struct 是结构体类型名","index":3,"selected":false}],"mode":0,"answer":1,"parse":"本题中，typedef 声明新的类型名PER来代替已有的类型名，PER代表上面指定的一个结构体类型，此时，也可以用PER来定义变量。"},{"title":"有以下程序\n#include \u003cstring.h\u003e\n#include \u003cstdio.h\u003e\nint main() {\nchar p[] \u003d { \u0027a\u0027, \u0027b\u0027, \u0027c\u0027 };\nchar q[10] \u003d { \u0027a\u0027, \u0027b\u0027, \u0027c\u0027 };\nprintf(\"%d%d\\n\", strlen(p), strlen(q));\nreturn 0;\n}\n以下叙述正确的是（ ）。","chooseList":[{"title":"在给 p和 q数组置初值时 ,系统会自动添加字符串结束符 ,故输出的长度都为 3","index":0,"selected":false},{"title":"由于 p数组中没有字符串结束符 ,长度不能确定 ,但 q数组中字符串长度为3","index":1,"selected":false},{"title":"由于 q数组中没有字符串结束符 ,长度不能确定 ,但 p数组中字符串长度为3","index":2,"selected":false},{"title":"由于 p 和 q数组中都没有字符串结束符 ,故长度都不能确定","index":3,"selected":false}],"mode":0,"answer":0,"parse":"在给 p 和 q 数组赋初值时 ,系统会自动添加字符串结束符 ,从题目中可以看出数组 p 和 q 都有 3 个字符 ,所以长度均为 3。"}]}